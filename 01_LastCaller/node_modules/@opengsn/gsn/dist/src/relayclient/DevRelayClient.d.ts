import RelayClient, { RelayingResult } from './RelayClient';
import RelayServer from '../relayserver/RelayServer';
import HttpServer from '../relayserver/HttpServer';
import { HttpProvider, provider } from 'web3-core';
import GsnTransactionDetails from './types/GsnTransactionDetails';
import { GSNConfig, GSNDependencies } from './GSNConfigurator';
import { Address } from './types/Aliases';
interface RunServerReturn {
    httpServer: HttpServer;
    relayServer: RelayServer;
}
export declare function runServer(web3provider: provider, relayHub: string, devConfig: DevGSNConfig): RunServerReturn;
export interface DevGSNConfig extends Partial<GSNConfig> {
    relayOwner: Address;
    relayWorkdir?: string;
    relayListenPort?: number;
    relayUrl?: string;
    baseRelayFee?: number;
    pctRelayFee?: number;
    gasPriceFactor: number;
    devMode?: boolean;
}
export declare class DevRelayClient extends RelayClient {
    serverStarted: boolean;
    httpServer?: HttpServer;
    relayServer?: RelayServer;
    private readonly devConfig;
    constructor(provider: HttpProvider, devConfig: Partial<DevGSNConfig>, overrideDependencies?: Partial<GSNDependencies>);
    relayTransaction(gsnTransactionDetails: GsnTransactionDetails): Promise<RelayingResult>;
    stopRelay(): Promise<void>;
    /**
       * initialize a local relay
       * @private
       */
    _initializeRelay(): Promise<void>;
    debug(...args: any): void;
}
export {};
