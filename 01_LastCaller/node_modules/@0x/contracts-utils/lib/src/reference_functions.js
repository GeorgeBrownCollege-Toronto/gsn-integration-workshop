"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("@0x/utils");
var MAX_UINT256 = new utils_1.BigNumber(2).pow(256).minus(1);
/**
 * Add two `uint256` values. Reverts on overflow.
 */
function safeAdd(a, b) {
    var r = a.plus(b);
    if (r.isGreaterThan(MAX_UINT256)) {
        throw new utils_1.SafeMathRevertErrors.Uint256BinOpError(utils_1.SafeMathRevertErrors.BinOpErrorCodes.AdditionOverflow, a, b);
    }
    return r;
}
exports.safeAdd = safeAdd;
/**
 * Subract two `uint256` values. Reverts on overflow.
 */
function safeSub(a, b) {
    var r = a.minus(b);
    if (r.isLessThan(0)) {
        throw new utils_1.SafeMathRevertErrors.Uint256BinOpError(utils_1.SafeMathRevertErrors.BinOpErrorCodes.SubtractionUnderflow, a, b);
    }
    return r;
}
exports.safeSub = safeSub;
/**
 * Multiplies two `uint256` values. Reverts on overflow.
 */
function safeMul(a, b) {
    var r = a.times(b);
    if (r.isGreaterThan(MAX_UINT256)) {
        throw new utils_1.SafeMathRevertErrors.Uint256BinOpError(utils_1.SafeMathRevertErrors.BinOpErrorCodes.MultiplicationOverflow, a, b);
    }
    return r;
}
exports.safeMul = safeMul;
/**
 * Divides two `uint256` values. Reverts on division by zero.
 */
function safeDiv(a, b) {
    if (b.isEqualTo(0)) {
        throw new utils_1.SafeMathRevertErrors.Uint256BinOpError(utils_1.SafeMathRevertErrors.BinOpErrorCodes.DivisionByZero, a, b);
    }
    return a.dividedToIntegerBy(b);
}
exports.safeDiv = safeDiv;
//# sourceMappingURL=reference_functions.js.map