{
    "schemaVersion": "2.0.0",
    "contractName": "ReentrancyGuard",
    "compilerOutput": {
        "abi": [],
        "devdoc": {
            "methods": {}
        },
        "evm": {
            "bytecode": {
                "linkReferences": {},
                "object": "0x60806040526000805460ff19169055348015601957600080fd5b50603e8060276000396000f3fe6080604052600080fdfea265627a7a7231582073e014f23f5d50ae30d7692f7ea63e2d74d10829547aa6255f5304cb5a71c3fc64736f6c63430005100032",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH1 0x19 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3E DUP1 PUSH1 0x27 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH20 0xE014F23F5D50AE30D7692F7EA63E2D74D1082954 PUSH27 0xA6255F5304CB5A71C3FC64736F6C63430005100032000000000000 ",
                "sourceMap": "682:778:18:-;;;767:5;744:28;;-1:-1:-1;;744:28:18;;;682:778;5:2:-1;;;;30:1;27;20:12;5:2;682:778:18;;;;;;;"
            },
            "deployedBytecode": {
                "linkReferences": {},
                "object": "0x6080604052600080fdfea265627a7a7231582073e014f23f5d50ae30d7692f7ea63e2d74d10829547aa6255f5304cb5a71c3fc64736f6c63430005100032",
                "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH20 0xE014F23F5D50AE30D7692F7EA63E2D74D1082954 PUSH27 0xA6255F5304CB5A71C3FC64736F6C63430005100032000000000000 ",
                "sourceMap": "682:778:18:-;;;;;"
            }
        }
    },
    "sources": {
        "src/ReentrancyGuard.sol": {
            "id": 18
        },
        "src/LibReentrancyGuardRichErrors.sol": {
            "id": 13
        },
        "src/LibRichErrors.sol": {
            "id": 14
        }
    },
    "sourceCodes": {
        "src/ReentrancyGuard.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\nimport \"./LibReentrancyGuardRichErrors.sol\";\nimport \"./LibRichErrors.sol\";\n\n\ncontract ReentrancyGuard {\n\n    // Locked state of mutex.\n    bool private _locked = false;\n\n    /// @dev Functions with this modifer cannot be reentered. The mutex will be locked\n    ///      before function execution and unlocked after.\n    modifier nonReentrant() {\n        _lockMutexOrThrowIfAlreadyLocked();\n        _;\n        _unlockMutex();\n    }\n\n    function _lockMutexOrThrowIfAlreadyLocked()\n        internal\n    {\n        // Ensure mutex is unlocked.\n        if (_locked) {\n            LibRichErrors.rrevert(\n                LibReentrancyGuardRichErrors.IllegalReentrancyError()\n            );\n        }\n        // Lock mutex.\n        _locked = true;\n    }\n\n    function _unlockMutex()\n        internal\n    {\n        // Unlock mutex.\n        _locked = false;\n    }\n}\n",
        "src/LibReentrancyGuardRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibReentrancyGuardRichErrors {\n\n    // bytes4(keccak256(\"IllegalReentrancyError()\"))\n    bytes internal constant ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES =\n        hex\"0c3b823f\";\n\n    // solhint-disable func-name-mixedcase\n    function IllegalReentrancyError()\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return ILLEGAL_REENTRANCY_ERROR_SELECTOR_BYTES;\n    }\n}\n",
        "src/LibRichErrors.sol": "/*\n\n  Copyright 2019 ZeroEx Intl.\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n\n*/\n\npragma solidity ^0.5.9;\n\n\nlibrary LibRichErrors {\n\n    // bytes4(keccak256(\"Error(string)\"))\n    bytes4 internal constant STANDARD_ERROR_SELECTOR =\n        0x08c379a0;\n\n    // solhint-disable func-name-mixedcase\n    /// @dev ABI encode a standard, string revert error payload.\n    ///      This is the same payload that would be included by a `revert(string)`\n    ///      solidity statement. It has the function signature `Error(string)`.\n    /// @param message The error string.\n    /// @return The ABI encoded error.\n    function StandardError(\n        string memory message\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodeWithSelector(\n            STANDARD_ERROR_SELECTOR,\n            bytes(message)\n        );\n    }\n    // solhint-enable func-name-mixedcase\n\n    /// @dev Reverts an encoded rich revert reason `errorData`.\n    /// @param errorData ABI encoded error data.\n    function rrevert(bytes memory errorData)\n        internal\n        pure\n    {\n        assembly {\n            revert(add(errorData, 0x20), mload(errorData))\n        }\n    }\n}\n"
    },
    "sourceTreeHashHex": "0x172b79db70050ac918a9bd2c34d254a5b32d1e1036f6e2fd1e30b67b7462f60e",
    "compiler": {
        "name": "solc",
        "version": "soljson-v0.5.16+commit.9c3226ce.js",
        "settings": {
            "optimizer": {
                "enabled": true,
                "runs": 1000000,
                "details": {
                    "yul": true,
                    "deduplicate": true,
                    "cse": true,
                    "constantOptimizer": true
                }
            },
            "outputSelection": {
                "*": {
                    "*": [
                        "abi",
                        "devdoc",
                        "evm.bytecode.object",
                        "evm.bytecode.sourceMap",
                        "evm.deployedBytecode.object",
                        "evm.deployedBytecode.sourceMap"
                    ]
                }
            },
            "evmVersion": "istanbul",
            "remappings": []
        }
    },
    "chains": {}
}
