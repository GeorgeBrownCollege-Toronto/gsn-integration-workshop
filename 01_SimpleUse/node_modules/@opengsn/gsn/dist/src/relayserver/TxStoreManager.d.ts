export class TxStoreManager {
    constructor({ workdir, inMemory }: {
        workdir?: string | undefined;
        inMemory?: boolean | undefined;
    });
    txstore: import("nedb-async").AsyncNedb<any>;
    putTx({ tx, updateExisting }: {
        tx: any;
        updateExisting: any;
    }): Promise<void>;
    getTxByNonce({ signer, nonce }: {
        signer: any;
        nonce: any;
    }): Promise<{
        _id: number;
    }>;
    getTxById({ txId }: {
        txId: any;
    }): Promise<{
        _id: number;
    }>;
    removeTxByNonce({ signer, nonce }: {
        signer: any;
        nonce: any;
    }): Promise<unknown>;
    removeTxsUntilNonce({ signer, nonce }: {
        signer: any;
        nonce: any;
    }): Promise<unknown>;
    clearAll(): Promise<unknown>;
    getAllBySigner(signer: any): Promise<any[]>;
    getAll(): Promise<any[]>;
}
export class StoredTx {
    constructor(tx: any);
    from: string;
    to: string;
    gas: number;
    gasPrice: number;
    data: string;
    nonce: number;
    txId: any;
    attempts: any;
}
export const TXSTORE_FILENAME: "txstore.db";
